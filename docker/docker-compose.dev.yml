services:
  # Init container to set up volume permissions
  setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    user: root
    volumes:
      - es_tokens:/tokens
    command: >
      bash -c "
        mkdir -p /tokens &&
        chown -R 1000:0 /tokens &&
        chmod 775 /tokens
      "
    profiles: ["setup"]

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    user: elasticsearch:root
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=true
      - xpack.security.authc.api_key.enabled=true
      - xpack.security.transport.ssl.enabled=false
      - xpack.security.http.ssl.enabled=false
      - xpack.security.authc.token.enabled=true
      - ELASTIC_PASSWORD=elastic123
      - "ES_JAVA_OPTS=-Xms400m -Xmx400m"
    volumes:
      - ${DEV_DATA_PATH:-../data}/elasticsearch:/usr/share/elasticsearch/data
      - ./setup-users.sh:/setup-users.sh:ro
      - es_tokens:/tokens
    ports:
      - "9200:9200"
    networks:
      - elastic
    healthcheck:
      test: ["CMD-SHELL", "curl -s -f -u elastic:elastic123 http://localhost:9200/_cat/health > /dev/null || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 600M
        reservations:
          memory: 400M
    command: >
      bash -c "
        # Start Elasticsearch
        /usr/local/bin/docker-entrypoint.sh elasticsearch &
        ES_PID=$!

        # Wait for Elasticsearch to be fully ready
        until curl -s -u elastic:elastic123 http://localhost:9200/_cluster/health | grep -q '\"status\":\"green\"\\|\"status\":\"yellow\"'; do
          echo 'Waiting for Elasticsearch cluster to be ready...'
          sleep 5
        done

        # Set kibana_system user password
        bash /setup-users.sh

        # Keep elasticsearch running
        wait $ES_PID
      "

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    depends_on:
      elasticsearch:
        condition: service_healthy
    environment:
      - NODE_OPTIONS="--max-old-space-size=384"
      - LOGGING_ROOT_LEVEL=info
      - LOGGING_VERBOSE=true
    volumes:
      - ./kibana.yml:/usr/share/kibana/config/kibana.yml:ro
      - ./kibana/dashboards:/dashboards:ro
      - ./setup_kibana.sh:/usr/local/bin/setup_kibana.sh:ro
    ports:
      - "5601:5601"
    networks:
      - elastic
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 384M
    healthcheck:
      test: ["CMD-SHELL", "curl -s -I http://localhost:5601/api/status | grep -q 'HTTP/1.1 200 OK'"]
      interval: 30s
      timeout: 30s
      retries: 3
    command: >
      bash -c '
        # Start Kibana in background
        /usr/share/kibana/bin/kibana &
        
        # Import dashboard (script handles waiting)
        /usr/local/bin/setup_kibana.sh
        
        # Wait for Kibana process
        wait
      '

networks:
  elastic:
    driver: bridge

volumes:
  es_tokens:
